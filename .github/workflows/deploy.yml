name: CI-CD pipeline to AWS
env:
  DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
  EB_S3_BUCKET_NAME: "elasticbeanstalk-ap-south-1-941377113359"
  EB_APPLICATION_NAME: "django-app"
  EB_ENVIRONMENT_NAME: "Django-app-env"
  DEPLOY_PACKAGE_NAME: "django-app-${{ github.sha }}.zip"
  VERSION_NAME: ${{ github.sha }}
  AWS_REGION_NAME: "ap-south-1"

on:
  push:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.9
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Run tests
        run: |
          python manage.py test

  build:
    runs-on: ubuntu-latest
    needs: [test]
    steps:
      - name: Git clone on our repo
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.9

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run migrations
        run: python manage.py migrate --noinput

      - name: Collect static files
        run: python manage.py collectstatic --noinput

      - name: Create zip deployment package
        run: zip -r ${{ env.DEPLOY_PACKAGE_NAME }} ./ -x *.git*

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION_NAME }}

      - name: Copying file to S3
        run: aws s3 cp ${{ env.DEPLOY_PACKAGE_NAME }} s3://${{ env.EB_S3_BUCKET_NAME }}/

      - name: Print nice message on success finish
        run: echo "CI part finished successfully"

  deploy:
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION_NAME }}

      - name: Check if Elastic Beanstalk Application exists
        id: check_application
        run: |
          if aws elasticbeanstalk describe-applications --region ${{ env.AWS_REGION_NAME }} \
            --query "Applications[?ApplicationName=='${{ env.EB_APPLICATION_NAME }}']" --output text; then
            echo "application_exists=true" >> $GITHUB_OUTPUT
          else
            echo "application_exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Create Elastic Beanstalk Application if it does not exist
        if: steps.check_application.outputs.application_exists == 'false'
        run: |
          aws elasticbeanstalk create-application \
            --application-name ${{ env.EB_APPLICATION_NAME }} \
            --region ${{ env.AWS_REGION_NAME }}

      - name: Check if environment exists
        id: check_env
        run: |
          if aws elasticbeanstalk describe-environments \
            --environment-names ${{ env.EB_ENVIRONMENT_NAME }} \
            --query "Environments[?Status!='Terminated']" --output text; then
            echo "environment_exists=true" >> $GITHUB_OUTPUT
          else
            echo "environment_exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Create environment if it does not exist
        if: steps.check_env.outputs.environment_exists == 'false'
        run: |
          aws elasticbeanstalk create-environment \
            --application-name ${{ env.EB_APPLICATION_NAME }} \
            --environment-name ${{ env.EB_ENVIRONMENT_NAME }} \
            --solution-stack-name "64bit Amazon Linux 2 v3.5.1 running Python 3.9" \
            --region ${{ env.AWS_REGION_NAME }} \
            --option-settings \
              Namespace=aws:elasticbeanstalk:application:environment,OptionName=DJANGO_SECRET_KEY,Value="${{ env.DJANGO_SECRET_KEY }}"

      - name: Create new Elastic Beanstalk application version
        run: |
          aws elasticbeanstalk create-application-version \
            --application-name ${{ env.EB_APPLICATION_NAME }} \
            --source-bundle S3Bucket="${{ env.EB_S3_BUCKET_NAME }}",S3Key="${{ env.DEPLOY_PACKAGE_NAME }}" \
            --version-label "${{ env.VERSION_NAME }}" \
            --region ${{ env.AWS_REGION_NAME }}

      - name: Wait for environment to be ready
        run: |
          aws elasticbeanstalk wait environment-updated --environment-name ${{ env.EB_ENVIRONMENT_NAME }}

      - name: Deploy new application version
        run: |
          if ! aws elasticbeanstalk update-environment \
            --environment-name ${{ env.EB_ENVIRONMENT_NAME }} \
            --version-label "${{ env.VERSION_NAME }}" \
            --option-settings \
              Namespace=aws:elasticbeanstalk:application:environment,OptionName=DJANGO_SECRET_KEY,Value="${{ env.DJANGO_SECRET_KEY }}"; then
            echo "Deployment failed"
            exit 1
          fi

      - name: Print nice message on success finish
        run: echo "CD part finished successfully"